name: CI

on:
    pull_request:
        branches: [main]
        types: [opened, reopened, synchronize, labeled]
    label:
        types: [created, edited]

jobs:
    context:
        runs-on: ubuntu-latest
        steps:
          - name: Print github context
            env:
              GITHUB_CONTEXT: ${{ toJSON(github) }}
            run: echo "$GITHUB_CONTEXT"
            
    quality-gate-check:
        # if: ${{ github.event.label.name != 'sonar-failed' && github.event.label.name != 'test-failed' && github.event.label.name != 'deployment-failed' }}
        uses: ./.github/workflows/sonar-reports.yml
        secrets: inherit

    test:
        runs-on: ubuntu-latest
        if: github.event.action == 'labeled' && contains(github.event.pull_request.labels.*.name, 'deploy:staging')
        steps:
            - name: Print
              run: echo "Hello"  
            

    org-checks:
         if: ${{ github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened') }} 
         runs-on: ubuntu-latest
         needs: quality-gate-check
         steps:
            - name: Setup checkout
              uses: actions/checkout@v3.3.0
            - name: Testing org-checks
              run: echo "Org checks success"    

    staging-deploy:
        needs: quality-gate-check
        if: ${{ needs.quality-gate-check.outputs.test-status == 'true' && needs.quality-gate-check.outputs.sonar-status == 'true' && contains(github.event.pull_request.labels.*.name, 'stage') && !contains(github.event.pull_request.labels.*.name, 'live') }}
        runs-on: ubuntu-latest
        environment:
          name: staging
        outputs:
            status: ${{steps.deployment.outputs.status}}
        steps:
            - name: Setup checkout
              uses: actions/checkout@v3.3.0
              with:
                  fetch-depth: 0
            - name: Deploy to Appengine
              id: deployment
              run: |
                echo "status=true" >> $GITHUB_OUTPUT
                echo ${{secrets.TEST}} | sed 's/./& /g'

    live-deploy:
        needs: quality-gate-check
        if: ${{ needs.quality-gate-check.outputs.test-status == 'true' && needs.quality-gate-check.outputs.sonar-status == 'true' && contains(github.event.pull_request.labels.*.name, 'live') && !contains(github.event.pull_request.labels.*.name, 'stage') }}
        runs-on: ubuntu-latest
        outputs:
            status: ${{steps.deployment.outputs.status}}
        steps:
            - name: Setup checkout
              uses: actions/checkout@v3.3.0
              with:
                  fetch-depth: 0
            - name: Deploy to Appengine
              id: deployment
              run: echo "status=true" >> $GITHUB_OUTPUT

    
